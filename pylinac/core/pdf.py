from datetime import datetime
import os.path as osp

from PIL import Image
from reportlab.pdfgen.canvas import Canvas
from reportlab.lib.units import cm
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader

from pylinac import __version__
from .io import retrieve_demo_file


PDF_FONT = "Helvetica"


def draw_text(canvas, x, y, text, fontsize=10):
    """Generic text drawing function"""
    textobj = canvas.beginText()
    textobj.setTextOrigin(x, y)
    textobj.setFont(PDF_FONT, int(fontsize))
    if isinstance(text, str):
        textobj.textLine(text)
    elif isinstance(text, list):
        for line in text:
            textobj.textLine(line)
    canvas.drawText(textobj)


def create_single_image_template(filename, image_obj, analysis_title='', analyzer='N/A', unit='N/A'):
    pdf_canvas = create_pylinac_page_template(filename, analysis_title)
    try:
        date_of_image = datetime.strptime(image_obj.metadata.ContentDate, "%Y%m%d").date()
        date_of_image = date_of_image.strftime("%A, %B %d, %Y")
    except AttributeError:
        date_of_image = "Unknown"
    date_of_analysis = datetime.now()
    draw_text(pdf_canvas, x=2*cm, y=25.5*cm,
              text=['Metadata:',
                    'File: {}'.format(osp.basename(image_obj.path)),
                    'File created: {}'.format(date_of_image),
                    'Date of analysis: {}'.format(date_of_analysis.strftime("%A, %B %d, %Y")),
                    'Analyzed by: {}'.format(analyzer),
                    'Unit: {}'.format(unit),
                    ])
    return pdf_canvas


def create_pylinac_page_template(filename, analysis_title=None):
    pdf_canvas = Canvas(filename, pagesize=A4)
    add_pylinac_page_template(pdf_canvas, analysis_title=analysis_title)
    return pdf_canvas


def add_pylinac_page_template(canvas, analysis_title=None):
    # draw logo and header separation line
    canvas.drawImage(retrieve_demo_file(url='Pylinac_Full_cropped.png'),
                         1 * cm, 26.5 * cm, width=5 * cm, height=3 * cm, preserveAspectRatio=True)
    canvas.line(1 * cm, 26.5 * cm, 20 * cm, 26.5 * cm)
    draw_text(canvas, x=7 * cm, y=27 * cm, fontsize=24, text=analysis_title)
    # draw generated by tag
    draw_text(canvas, 0.5 * cm, 0.5 * cm, "Generated with Pylinac version {}".format(__version__), fontsize=8)


def create_stream_image(data_io):
    data_io.seek(0)
    return ImageReader(Image.open(data_io))
